<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>Qu·∫£n l√Ω ƒë∆°n h√†ng</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 10px;
            border: 1px solid #ccc;
        }
        .actions button {
            margin-right: 5px;
            cursor: pointer;
        }
        .modal {
            display: none;
            position: fixed;
            top: 10%;
            left: 50%;
            transform: translateX(-50%);
            background: #fff;
            padding: 20px;
            border: 1px solid #888;
            z-index: 1000;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }
        .modal.active {
            display: block;
        }
    </style>
</head>
<body>
    <h2>Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
    <table>
        <thead>
            <tr>
                <th>STT</th>
                <th>Kh√°ch h√†ng</th>
                <th>Ng√†y ƒë·∫∑t</th>
                <th>T·ªïng ti·ªÅn</th>
                <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Ch·ª©c nƒÉng</th>
            </tr>
        </thead>
        <tbody id="order-table-body">
            <!-- D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c render ·ªü ƒë√¢y -->
        </tbody>
    </table>

    <!-- Modal xem chi ti·∫øt -->
    <div id="order-detail-modal" class="modal"></div>

    <!-- Modal c·∫≠p nh·∫≠t tr·∫°ng th√°i -->
    <div id="order-status-modal" class="modal">
        <h3>C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng</h3>
        <form id="status-form">
            <input type="hidden" id="status-order-id">
            <label for="status-select">Tr·∫°ng th√°i:</label>
            <select id="status-select">
                <option value="pending">ƒêang x·ª≠ l√Ω</option>
                <option value="shipped">ƒê√£ giao</option>
                <option value="cancelled">ƒê√£ h·ªßy</option>
            </select>
            <br><br>
            <button type="submit">L∆∞u tr·∫°ng th√°i</button>
        </form>
    </div>

    <script src="../../../JS/admin/order.js"></script>
    <script>
        showAll();
        function showAll() {
            getAllOrders()
                .then(result => {
                    let stt = 1;
                    const orders = result;
                    const tbody = document.querySelector("#order-table-body");
                    tbody.innerHTML = ""; // X√≥a n·ªôi dung c≈©
                    orders.forEach(order => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                            <td>${stt++}</td>
                            <td>${order.customerName}</td>
                            <td>${order.createdAt}</td>
                            <td>${order.totalPrice}‚Ç´</td>
                            <td>${order.paymentMethod || 'N/A'}</td>
                            <td>${order.status}</td>
                            <td class="actions">
                                <button onclick="viewDetails(${order.ID})">üëÅÔ∏è</button>
                                <button onclick="editOrder(${order.ID})">‚úèÔ∏è</button>
                                <button onclick="showStatusModal(${order.ID}, '${order.status}')">üîÅ</button>
                            </td>
                        `;
                        tbody.appendChild(tr);
                    });
                })
                .catch(error => {
                    console.error('L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:', error.message);
                });
        }

        window.viewDetails = async (orderID) => {
            const detailModal = document.getElementById('order-detail-modal');
            try {
                const details = await getOrderDetails(orderID);
                if (details && details.length > 0) {
                    const detail = details[0];
                    detailModal.innerHTML = `
                        <h3>Chi ti·∫øt ƒë∆°n h√†ng #${orderID}</h3>
                        <p><strong>T√™n:</strong> ${detail.receiverName}</p>
                        <p><strong>ƒê·ªãa ch·ªâ:</strong> ${detail.address}</p>
                        <p><strong>SƒêT:</strong> ${detail.phone}</p>
                        <p><strong>Email:</strong> ${detail.email}</p>
                        <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${detail.paymentMethod}</p>
                        <button onclick="document.getElementById('order-detail-modal').classList.remove('active')">ƒê√≥ng</button>
                    `;
                    detailModal.classList.add('active');
                } else {
                    alert('Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng');
                }
            } catch (error) {
                console.error('L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', error);
                alert('Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng');
            }
        };

        window.editOrder = async (orderID) => {
            const newName = prompt('T√™n ng∆∞·ªùi nh·∫≠n m·ªõi:');
            const newAddress = prompt('ƒê·ªãa ch·ªâ m·ªõi:');
            const newPhone = prompt('S·ªë ƒëi·ªán tho·∫°i m·ªõi:');
            const newEmail = prompt('Email m·ªõi:');
            const newPaymentMethod = prompt('ID ph∆∞∆°ng th·ª©c thanh to√°n m·ªõi:');
            if (newName && newAddress && newPhone && newEmail && newPaymentMethod) {
                try {
                    await updateOrderDetails({
                        orderID,
                        receiverName: newName,
                        address: newAddress,
                        phone: newPhone,
                        email: newEmail,
                        paymentMethodID: newPaymentMethod
                    });
                    alert('ƒê√£ c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng');
                    showAll();
                } catch (error) {
                    console.error('L·ªói khi c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng:', error);
                    alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chi ti·∫øt ƒë∆°n h√†ng');
                }
            }
        };

        window.showStatusModal = (orderID, currentStatus) => {
            const statusModal = document.getElementById('order-status-modal');
            const statusOrderIdInput = document.getElementById('status-order-id');
            const statusSelect = document.getElementById('status-select');
            statusOrderIdInput.value = orderID;
            statusSelect.value = currentStatus;
            statusModal.classList.add('active');
        };

        const statusForm = document.getElementById('status-form');
        statusForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const statusOrderIdInput = document.getElementById('status-order-id');
            const statusSelect = document.getElementById('status-select');
            const statusModal = document.getElementById('order-status-modal');
            const orderID = statusOrderIdInput.value;
            const newStatus = statusSelect.value;
            try {
                await updateOrderStatus(orderID, newStatus);
                alert('ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng');
                statusModal.classList.remove('active');
                showAll();
            } catch (error) {
                console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
                alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
            }
        });
    </script>
</body>
</html>